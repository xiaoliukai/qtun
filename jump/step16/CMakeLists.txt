
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3)

SET(PROJECT_NAME qtun)
SET(MAJOR_VERSION_NUMBER 1)
SET(MINOR_VERSION_NUMBER 1)
SET(REVISION_VERSION_NUMBER 0)

PROJECT(${PROJECT_NAME})
SET(VERSION "${MAJOR_VERSION_NUMBER}.${MINOR_VERSION_NUMBER}.${REVISION_VERSION_NUMBER}")

FILE(WRITE version.h
"#ifndef _VERSION_H_
#define _VERSION_H_

#define QTUN_MAJOR_VERSION    ${MAJOR_VERSION_NUMBER}
#define QTUN_MINOR_VERSION    ${MINOR_VERSION_NUMBER}
#define QTUN_REVISION_VERSION ${REVISION_VERSION_NUMBER}
#define QTUN_VERSION          \"${VERSION}\"

#define CHECK_VERSION(a, b, c) ((a == QTUN_MAJOR_VERSION) && (b == QTUN_MINOR_VERSION) && (c == QTUN_REVISION_VERSION))

#endif
")

FIND_PATH(WARNING2ERROR_PATH warning2error.cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/../
    ${CMAKE_CURRENT_SOURCE_DIR}/../../
)
INCLUDE(${WARNING2ERROR_PATH}/warning2error.cmake)

INCLUDE(CheckTypeSize)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckCSourceCompiles)

MACRO (ADD_HEADER_DEFINITION FILE DEF)
    SET(DEF_NAME ${DEF})
    CHECK_INCLUDE_FILE(${FILE} ${DEF})
    IF (${DEF})
        ADD_DEFINITIONS(-D${DEF_NAME})
    ENDIF ()
ENDMACRO ()

ADD_HEADER_DEFINITION(arpa/inet.h HAVE_ARPA_INET_H)

ADD_HEADER_DEFINITION(linux/if.h HAVE_LINUX_IF_H)
ADD_HEADER_DEFINITION(linux/if_tun.h HAVE_LINUX_IF_TUN_H)
ADD_HEADER_DEFINITION(linux/tcp.h HAVE_LINUX_TCP_H)

ADD_HEADER_DEFINITION(sys/ioctl.h HAVE_SYS_IOCTL_H)
ADD_HEADER_DEFINITION(sys/socket.h HAVE_SYS_SOCKET_H)
ADD_HEADER_DEFINITION(sys/time.h HAVE_SYS_TIME_H)

ADD_HEADER_DEFINITION(netinet/tcp.h HAVE_NETINET_TCP_H)

ADD_HEADER_DEFINITION(byteswap.h HAVE_BYTESWAP_H)
ADD_HEADER_DEFINITION(execinfo.h HAVE_EXECINFO_H)
ADD_HEADER_DEFINITION(getopt.h HAVE_GETOPT_H)
ADD_HEADER_DEFINITION(io.h HAVE_IO_H)
ADD_HEADER_DEFINITION(netdb.h HAVE_NETDB_H)
ADD_HEADER_DEFINITION(syslog.h HAVE_SYSLOG_H)
ADD_HEADER_DEFINITION(unistd.h HAVE_UNISTD_H)

INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/source.cmake)

FIND_PATH(THIRDPARTY_PATH 3rdParty
    ${CMAKE_CURRENT_SOURCE_DIR}/../3rdParty/
    ${CMAKE_CURRENT_SOURCE_DIR}/../../3rdParty/
)

FIND_PATH(ZLIB_PATH zlib.cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/
    ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/
)
INCLUDE(${ZLIB_PATH}/zlib.cmake)

FIND_PATH(OPENSSL_PATH openssl.cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/
    ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/
)
INCLUDE(${OPENSSL_PATH}/openssl.cmake)

FIND_PATH(LUA_PATH lua.cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/
    ${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/
)
INCLUDE(${LUA_PATH}/lua.cmake)

INCLUDE_DIRECTORIES(
    ${OPENSSL_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIR}
    ${LUA_INCLUDE_DIR}
)

ADD_DEFINITIONS(-DOPENSSL_NO_ASM) # fix for clang build

ADD_EXECUTABLE(${PROJECT_NAME} ${OPENSSL_SOURCES} ${ZLIB_SOURCES} ${LUA_SOURCES} ${SOURCE})

SET(LIBRARIES)

IF (WIN32)
    INCLUDE_DIRECTORIES(${QTUN_SOURCE_DIR}/3rdParty)
    LIST(APPEND LIBRARIES
        "WSock32"
        "IPHlpApi"
        "Mprapi"
    )
ELSE ()
    LIST(APPEND LIBRARIES
        "m"
    )
ENDIF ()

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBRARIES})
